/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RegistContract,
  RegistContractInterface,
} from "../../../contracts/Register_novice_package.sol/RegistContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isRegisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "regist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103b4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806317b7cf2b1461003b578063cb4b6b8a1461006b575b600080fd5b61005560048036038101906100509190610231565b610075565b6040516100629190610279565b60405180910390f35b6100736100ca565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600015156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461015c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610153906102f1565b60405180910390fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060018060008282546101c5919061034a565b92505081905550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101fe826101d3565b9050919050565b61020e816101f3565b811461021957600080fd5b50565b60008135905061022b81610205565b92915050565b600060208284031215610247576102466101ce565b5b60006102558482850161021c565b91505092915050565b60008115159050919050565b6102738161025e565b82525050565b600060208201905061028e600083018461026a565b92915050565b600082825260208201905092915050565b7f616c726561647920726567697374656400000000000000000000000000000000600082015250565b60006102db601083610294565b91506102e6826102a5565b602082019050919050565b6000602082019050818103600083015261030a816102ce565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061035582610311565b915061036083610311565b92508282019050808211156103785761037761031b565b5b9291505056fea2646970667358221220c59936cd5563476bc715e4358743a5b5134e600d113f5265bf332ad591d0d4ab64736f6c63430008100033";

type RegistContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RegistContract__factory extends ContractFactory {
  constructor(...args: RegistContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RegistContract> {
    return super.deploy(overrides || {}) as Promise<RegistContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RegistContract {
    return super.attach(address) as RegistContract;
  }
  override connect(signer: Signer): RegistContract__factory {
    return super.connect(signer) as RegistContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistContractInterface {
    return new utils.Interface(_abi) as RegistContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RegistContract {
    return new Contract(address, _abi, signerOrProvider) as RegistContract;
  }
}
